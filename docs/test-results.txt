======================== 01-simple =========================
[ PASS ] 1 is int => True
[ PASS ] '' is int => False
[REASON] str('') is not int
[ PASS ] [1, 2, 3] is list[int] => True
[ PASS ] [1, 2, ''] is list[int] => False
[REASON] list[2] = str('') is not int
[ PASS ] 1 is typing.Literal[1] => True
[ PASS ] 2 is typing.Literal[1] => False
[REASON] int(2) is not typing.Literal[1]
[ PASS ] 'alex' is typing.Literal['alex', 'bob'] => True
[ PASS ] 'alex' is typing.Literal['bob'] => False
[REASON] str('alex') is not typing.Literal['bob']
======================= 02-multiple ========================
[ PASS ] (1, '2', 3.0) is tuple[int, str, float] => True
[ PASS ] (1, '2', '3') is tuple[int, str, float] => False
[REASON] tuple[2] = str('3') is not float
[ PASS ] (1, '2') is tuple[int, str, float] => False
[REASON] tuple((1, '2')) is not tuple[int, str, float]
[ PASS ] (1, '2', 3.0) is tuple[int, str, float] => True
[ PASS ] (1, '2', '3') is tuple[int, str, float] => False
[REASON] tuple[2] = str('3') is not float
[ PASS ] {1, 3.0, '2'} is set[int | str | float] => True
[ PASS ] {None, 1, '2'} is set[int | str | float] => False
[REASON] set[?] = NoneType(None) is not int | str | float
[ PASS ] {1: '2', 3: 4.0} is dict[int, str | float] => True
[ PASS ] {1: '2', '3': 4.0} is dict[int, str | float] => False
[REASON] dict<key> = str('3') is not int
[ PASS ] {1: '2', 3: None} is dict[int, str | float] => False
[REASON] dict[3] = NoneType(None) is not str | float
======================== 03-nested =========================
[ PASS ] [[1, 2], [3, 4]] is list[list[int]] => True
[ PASS ] [[1, 2], [3, '4']] is list[list[int]] => False
[REASON] list[1][1] = str('4') is not int
======================== 04-unions =========================
[ PASS ] [[1, 2], ['3', '4']] is list[list[int] | list[str]] => True
[ PASS ] [[1, '2'], [3, '4']] is list[list[int] | list[float]] => False
[REASON] list[0] = list([1, '2']) is not list[int] | list[float]
======================== 05-inherit ========================
[ PASS ] [1, 2, 3] is tests.05-inherit.A => True
[ PASS ] [1, 2, 0.0] is tests.05-inherit.A => False
[REASON] A[2] = float(0.0) is not int
[ PASS ] B(x=1, y='2') is tests.05-inherit.B[int, str] => True
[ PASS ] B(x=1, y=2.0) is tests.05-inherit.B[int, str] => False
[REASON] B.y = float(2.0) is not str
========================= 06-guard =========================
[ PASS ] A([1, 2, 3]) is tests.06-guard.A => True
[ PASS ] [1, 2, '3'] is tests.06-guard.A => False
[REASON] A[2] = str('3') is not int
[ PASS ] B(x=1, y='2') is tests.06-guard.B => True
[ PASS ] B(x='1', y=2) is tests.06-guard.B => False
[REASON] B.x = str('1') is not int
[ PASS ] C(x=1) is tests.06-guard.C[int] => True
[ PASS ] C(x='1') is tests.06-guard.C[int] => False
[REASON] C.x = str('1') is not int
[ PASS ] add(1, 2) is int => True
[ PASS ] add('1', '2') is str => True
[ PASS ] [1, 2] is int | str => False
[REASON] list([1, 2]) is not int | str
[ PASS ] All 35 tests passed
